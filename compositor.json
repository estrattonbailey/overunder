{
  "name": "estrattonbailey/overunder",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.21"
  },
  "title": "overunder",
  "branch": "master",
  "style": {
    "name": "Swiss",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/SwissHeader",
      "article": "article/SwissArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "\"Helvetica Neue\", Helvetica, Arial, sans-serif",
    "heading": {
      "fontWeight": 700,
      "letterSpacing": "-0.01em"
    },
    "layout": {
      "fluid": true
    },
    "colors": {
      "text": "#000",
      "background": "#fff",
      "primary": "#05a",
      "secondary": "#444",
      "highlight": "#f30",
      "border": "#ccc",
      "muted": "#eee"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/estrattonbailey/overunder",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/overunder",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "overunder",
      "subhead": "A small waypoint library that emits events when you scroll to a specific element(s), or resize to a specified width.",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "overunder: A small waypoint library that emits events when you scroll to a specific element(s), or resize to a specified width.",
          "url": ""
        },
        {
          "component": "ui/GithubButton",
          "user": "estrattonbailey",
          "repo": "overunder"
        }
      ],
      "text": "v0.4.1"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<p>A small waypoint library that emits events when you scroll to a specific element(s), or resize to a specified width. <strong>2.0kb gzipped.</strong></p>\n<p>Use overunder for sticky elements, lazy loading, <a href=\"https://www.sitepoint.com/beyond-media-queries-time-get-elemental/\">element queries</a>, etc.</p>\n<h2>Install</h2>\n<pre>npm i overunder --save</pre><h2>Usage</h2>\n<h4>Create An Instance</h4>\n<p>Create an instance with two waypoints.</p>\n<pre><span class=\"hljs-keyword\">import</span> overunder <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;overunder&apos;</span>\n\n<span class=\"hljs-keyword\">const</span> endWaypoint = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&apos;anchor&apos;</span>)\n\n<span class=\"hljs-keyword\">const</span> scroller = overunder.scroll(<span class=\"hljs-number\">200</span>, endWaypoint, {<span class=\"hljs-attr\">watchResize</span>: <span class=\"hljs-literal\">true</span>})\n\nscroller.on(<span class=\"hljs-string\">&apos;under&apos;</span>, (instance) =&gt; {\n  <span class=\"hljs-comment\">// under 200px</span>\n})\n\nscroller.on(<span class=\"hljs-string\">&apos;between&apos;</span>, (instance) =&gt; {\n  <span class=\"hljs-comment\">// between 200px and endWaypoint offset top</span>\n})\n\nscroller.on(<span class=\"hljs-string\">&apos;over&apos;</span>, (instance) =&gt; {\n  <span class=\"hljs-comment\">// over endWaypoint offset top</span>\n})\n\n<span class=\"hljs-comment\">// Start watching scroll and check position</span>\nscroller.init().update()</pre><h4>Destroy An Instance</h4>\n<p>Destroy an instance and all handlers.</p>\n<pre>scroller.destroy()</pre><h4>Update Instance After DOM Change</h4>\n<p>After a DOM change, like appending elements via AJAX, check scroll position again.</p>\n<pre>scroller.update()</pre><p>If a waypoint changes, or you need to update either of the waypoints, pass them as arguments to the <code>update()</code> method. This will also check the position immediately after updating the waypoint value.</p>\n<pre>scroller.update(<span class=\"hljs-number\">500</span>)\n\n<span class=\"hljs-comment\">// Or pass a new element</span>\nscroller.update(<span class=\"hljs-number\">500</span>, newEndWaypoint)</pre><h2>API</h2>\n<pre><span class=\"hljs-keyword\">import</span> overunder <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;overunder&apos;</span></pre><h3>.scroll</h3>\n<pre>overunder.scroll(delta, range, options)</pre><ul>\n<li>delta <code>number|element</code> - first waypoint</li>\n<li>range <code>number|element</code> - (optional) second waypoint, enables the <code>between</code> event</li>\n<li>options <code>object</code> - (optional) available properties: <code>watchResize</code> <code>offset</code> <code>enterBottom</code></li>\n</ul>\n<h3>.resize</h3>\n<pre>overunder.resize(delta, range, options)</pre><ul>\n<li>delta <code>number|element</code> - first waypoint</li>\n<li>range <code>number|element</code> - (optional) second waypoint, enables the <code>between</code> event</li>\n<li>options <code>object</code> - (optional) available properties: <code>offset</code> <code>context</code></li>\n</ul>\n<h3>.on</h3>\n<p>Attach event listeners for a event. The callback gets a reference to the overunder instance as its first parameter.</p>\n<pre>overunder.on(event, callback)</pre><h3>.off</h3>\n<p>Remove event listener.</p>\n<pre><span class=\"hljs-keyword\">const</span> handler = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\noverunder.off(<span class=\"hljs-string\">&apos;over&apos;</span>, handler)</pre><h3>.init</h3>\n<p>Initiate the instance and start watching for resize or scroll events. Returns the instance, allowing you to chain <code>update()</code>.</p>\n<pre>overunder.init()</pre><h3>.update</h3>\n<p>Allows you to check the position of the instance at any time, as well as update values and options. Position is checked once each time you call update, regardless of if you&apos;ve passed any params or not.</p>\n<pre>overunder.update()</pre><p>Optionally update the waypoints, and then check position.</p>\n<pre>overunder.update(newDelta, newRange)</pre><p>To update just the <code>range</code> value, pass a falsy value as the first param.</p>\n<pre>overunder.update(<span class=\"hljs-literal\">null</span>, newRange)</pre><p>To update options properties, pass the object <em>after</em> your <code>delta</code> or <code>range</code> values.</p>\n<pre>overunder.update(newDelta, {<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-attr\">enterBottom</span>: <span class=\"hljs-literal\">true</span>})\noverunder.update(newDelta, newRange, {<span class=\"hljs-attr\">negativeOffset</span>: newNegOffset})\noverunder.update({<span class=\"hljs-attr\">watchResize</span>: <span class=\"hljs-literal\">true</span>})</pre><h3>.destroy</h3>\n<p>Destroy the instance and remove all listeners.</p>\n<pre>overunder.destroy()</pre><h2>Options</h2>\n<p>Options are passed as an object as the second or third parameter of either the <code>scroll()</code> or <code>resize()</code> methods.</p>\n<h3>offset <code>number|element</code> - default: 0</h3>\n<p>Buffer distance, <strong>subtracted</strong> from scroll/resize position (gets triggered sooner). Pass a negative number to achieve a positive offset (gets triggered later). To acheive a positive offset using an element, use <code>negativeOffset</code> below.</p>\n<h3>negativeOffset <code>number|element</code> - default: 0</h3>\n<p>A value that is always <strong>added</strong> to the position value. I realize the naming of these two offset options is confusing, need to figure that out.</p>\n<h3>watchResize <code>boolean</code> - default: false</h3>\n<p>Continously checks scroll position on resize. <em>For <code>scroll()</code> instances only.</em></p>\n<h3>enterBottom <code>boolean</code> - default: false</h3>\n<p>By defaul, overunder fires events when waypoints reach the top of the viewport. Enable this option to fire events when the waypoint enters the bottom of the viewport. <em>For <code>scroll()</code> instances only.</em></p>\n<h3>context <code>element</code> - default: window</h3>\n<p>Watch a specific element for changes in width. <em>For <code>resize()</code> instances only.</em></p>\n<h2>TODO</h2>\n<ol>\n<li>Test <code>context</code> option for scroll instances scroll</li>\n<li>Enforce options for <code>scroll</code> vs <code>resize</code> i.e. resize doesn&apos;t need <code>watchResize</code> option</li>\n</ol>\n<h3>MIT License - Please contribute! :)</h3>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/estrattonbailey/overunder",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/estrattonbailey",
          "text": "estrattonbailey"
        }
      ]
    }
  ]
}